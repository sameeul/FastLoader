// NIST-developed software is provided by NIST as a public service. You may use, copy and distribute copies of the
// software in any medium, provided that you keep intact this entire notice. You may improve, modify and create
// derivative works of the software or any portion of the software, and you may copy and distribute such modifications
// or works. Modified works should carry a notice stating that you changed the software and should note the date and
// nature of any such change. Please explicitly acknowledge the National Institute of Standards and Technology as the
// source of the software. NIST-developed software is expressly provided "AS IS." NIST MAKES NO WARRANTY OF ANY KIND,
// EXPRESS, IMPLIED, IN FACT OR ARISING BY OPERATION OF LAW, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTY OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT AND DATA ACCURACY. NIST NEITHER REPRESENTS NOR
// WARRANTS THAT THE OPERATION OF THE SOFTWARE WILL BE UNINTERRUPTED OR ERROR-FREE, OR THAT ANY DEFECTS WILL BE
// CORRECTED. NIST DOES NOT WARRANT OR MAKE ANY REPRESENTATIONS REGARDING THE USE OF THE SOFTWARE OR THE RESULTS
// THEREOF, INCLUDING BUT NOT LIMITED TO THE CORRECTNESS, ACCURACY, RELIABILITY, OR USEFULNESS OF THE SOFTWARE. You
// are solely responsible for determining the appropriateness of using and distributing the software and you assume
// all risks associated with its use, including but not limited to the risks and costs of program errors, compliance
// with applicable laws, damage to or loss of data, programs or equipment, and the unavailability or interruption of 
// operation. This software is not intended to be used in any situation where a failure could cause risk of injury or
// damage to property. The software developed by NIST employees is not subject to copyright protection within the
// United States.
//
// Created by anb22 on 11/8/19.
//

#ifndef FASTLOADER_TILE_REQUEST_H
#define FASTLOADER_TILE_REQUEST_H

#include <cstdint>
#include <memory>
#include <set>
#include <ostream>
#include <algorithm>
#include <iostream>
#include "volume/copy_volume.h"
/// @brief FastLoader namespace
namespace fl {

/// @brief FastLoader internal namespace
namespace internal {

/// @brief The Tile Request Data represent a specific tile request which will fill the future view. It has been
/// generated by The ViewLoader and sent to the AbstractTileLoader. The AbstractTileLoader will use it to know which
/// tile to request to the cache / file and then copy part or the whole tile into the view. All the positions for the
/// copy (source/destination) are stored into the TileRequestData.
/// @tparam ViewType Type of the view
template<class ViewType>
class TileRequest {
  uint32_t
      indexRowTileAsked_{}, ///< Row index tile needed
      indexColTileAsked_{}, ///< Column index tile needed
      indexLayerTileAsked_{}; ///< Layer index tile needed

  std::list<CopyVolume>
      copies_{}; ///< List of copies from the tile to the view

  std::shared_ptr<ViewType>
      view_{}; ///< AbstractView to copy into

 public:
  /// @brief TileRequest constructor
  /// @param indexRowTileAsked Requested row index tile
  /// @param indexColTileAsked Requested column index tile
  /// @param indexLayerTileAsked Requested layer index tile
  /// @param view AbstractView to copy into
  TileRequest(
      uint32_t indexRowTileAsked, uint32_t indexColTileAsked, uint32_t indexLayerTileAsked,
      std::shared_ptr<ViewType> const &view)
      : indexRowTileAsked_(indexRowTileAsked), indexColTileAsked_(indexColTileAsked),
      indexLayerTileAsked_(indexLayerTileAsked), view_(view) {}

  /// @brief Default destructor
  virtual ~TileRequest() = default;

  /// @brief Row index tile accessor
  /// @return Row index tile
  [[nodiscard]] uint32_t const &indexRowTileAsked() const { return indexRowTileAsked_; }
  /// @brief Column index tile accessor
  /// @return Column index tile
  [[nodiscard]] uint32_t const &indexColTileAsked() const { return indexColTileAsked_; }
  /// @brief Layer index tile accessor
  /// @return Layer index tile
  [[nodiscard]] uint32_t const & indexLayerTileAsked() const { return indexLayerTileAsked_; }

  /// @brief AbstractView accessor
  /// @return AbstractView
  [[nodiscard]] std::shared_ptr<ViewType> view() { return view_; }
  /// @brief List of copies to do accessor
  /// @return List of copies to do
  [[nodiscard]] std::list<CopyVolume> const &copies() const { return copies_; }
  /// @brief Add a copy to the list of copies to do
  /// @param copy Copy to add (moved)
  void addCopy(CopyVolume const &&copy) { copies_.push_back(copy); }

  /// @brief Merge Copies from two TileRequest
  /// @param rhs TileRequest to merge into *this
  void merge(TileRequest<ViewType> const &rhs) {
    for (CopyVolume const &cpy : rhs.copies()) {
      auto found = std::find_if(this->copies().begin(), this->copies().end(),
                                [&cpy](auto lhs) { return cpy == lhs; });
      if (found == this->copies().end()) {
        copies_.push_back(cpy);
      }
    }
  }

  /// @brief Equality operator
  /// @param rhs TileRequest to compare
  /// @return True if rhs == *this, else false
  bool operator==(TileRequest const &rhs) const {
    return indexRowTileAsked_ == rhs.indexRowTileAsked_ &&
        indexColTileAsked_ == rhs.indexColTileAsked_ &&
        indexLayerTileAsked_ == rhs.indexLayerTileAsked_ &&
        view_ == rhs.view_;
  }

  /// @brief Inequality operator
  /// @param rhs TileRequest to compare
  /// @return True if rhs != *this, else false
  bool operator!=(TileRequest const &rhs) const {
    return !(rhs == *this);
  }

  /// @brief TileRequest's stream output operator
  /// @param os Output stream to print information
  /// @param request TileRequest to print
  /// @return The same output stream as parameter for chaining
  friend std::ostream &operator<<(std::ostream &os, TileRequest const &request) {
    os << "TileRequest: (r:"
    << request.indexRowTileAsked_ << ", c:" << request.indexColTileAsked_ << ", l:" << request.indexLayerTileAsked_
    << ")" << std::endl;
    for (auto cpy : request.copies()) {
      std::cout << "\t" << cpy << std::endl;
    }
    return os;
  }
};
}
}
#endif //FASTLOADER_TILE_REQUEST_H
